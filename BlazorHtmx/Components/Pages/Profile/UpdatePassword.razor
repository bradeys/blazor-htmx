@using System.ComponentModel.DataAnnotations
@using BlazorHtmx.Components.Layout

@page "/update-password"
@layout RazorComponent

@code {
	[CascadingParameter] public HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	public PasswordForm? Form { get; set; }
	private string customMessage = "";

	protected override async Task OnInitializedAsync()
	{
		Form ??= new();
	}

	private async Task OnSubmit()
	{
		return;
	// var currentUser = await AuthService.GetAuthenticatedUser(HttpContext.User);
	//
	// if (currentUser != null)
		// {
		// var existingUser = await UsersService.FindUserByCredsAsync(currentUser.Email,
		// UsersService.GetSha256Hash(PasswordForm.CurrentPassword));
		// if (existingUser == null)
		// {
		// customMessage = "Current password was incorrect.";
		// return;
		// }
		//
		// existingUser.Password = UsersService.GetSha256Hash(PasswordForm.NewPassword);
		// Db.Users.Save(existingUser);
		// HttpContext.SetFlash("success", "Password updated.");
		// NavManager.XRedirect(HttpContext, "profile/edit");
		// }
	}

	public class PasswordForm
	{
		[Required(ErrorMessage = "Current Password is required")]
		public string CurrentPassword { get; set; } = default!;

		[Required(ErrorMessage = "New Password is required")]
		public string NewPassword { get; set; } = default!;

		[Required(ErrorMessage = "Confirm password is required")]
		[Compare("NewPassword", ErrorMessage = "The New Password and Confirm Password do not match.")]
		public string ConfirmPassword { get; set; } = default!;
	}
}

<EditForm Model="Form"
			 OnValidSubmit="OnSubmit"
			 FormName="PasswordForm"
			 method="post"
			 hx-post="/update-password"
			 hx-swap="outerHTML"
			 class="max-w-2xl grid grid-cols-1 gap-y-6">
	<DataAnnotationsValidator />
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">Current Password</span>
		</div>
		<InputText @bind-Value="Form.CurrentPassword"
					  type="password"
					  class="input input-bordered w-full" />
		<ValidationMessage For="() => Form.CurrentPassword" />
		@if (!String.IsNullOrEmpty(customMessage))
		{
			<div class="mt-1 text-red-500 text-sm">
				@customMessage
			</div>
		}
	</label>
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">New Password</span>
		</div>
		<InputText @bind-Value="Form.NewPassword"
					  type="password"
					  class="input input-bordered w-full" />
		<ValidationMessage For="() => Form.NewPassword" />
	</label>
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text font-medium">Confirm Password</span>
		</div>
		<InputText @bind-Value="Form.ConfirmPassword"
					  type="password"
					  class="input input-bordered w-full" />
		<ValidationMessage For="() => Form.ConfirmPassword" />
	</label>
	<div class="flex justify-end">
		<button type="submit"
				  class="btn btn-neutral">
			<span class="loading loading-spinner loading-xs htmx-indicator"></span>
			Save
		</button>
	</div>
</EditForm>
